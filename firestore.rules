
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin of a specific organization
    function isOrgAdmin(orgId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is a member of a specific organization
    function isOrgMember(orgId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId;
    }
    
    // Helper function to check if the user is a super admin
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super-admin';
    }

    // Organizations can be read by any member of that org, or by a super admin.
    // They can only be created by an authenticated user (logic is in backend).
    // Updates are restricted to admins of that org or super admins.
    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId) || isSuperAdmin();
      allow create: if request.auth != null;
      allow update: if isOrgAdmin(orgId) || isSuperAdmin();
      // Deletion should be handled by a cloud function for safety
      allow delete: if false; 
    }
    
    // Allow super admins to list all organizations
    match /organizations/{orgId} {
        allow list: if isSuperAdmin();
    }


    // Users can only be created by an admin of the same organization, or by a super-admin.
    // A user can read/update their own document.
    // An admin can read/update/delete any user within their own organization.
    // Super-admins cannot be created or modified via security rules to prevent privilege escalation.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isOrgAdmin(resource.data.organizationId);
      allow create: if isOrgAdmin(request.resource.data.organizationId) || isSuperAdmin();
      allow update: if request.auth.uid == userId || isOrgAdmin(resource.data.organizationId);
      allow delete: if isOrgAdmin(resource.data.organizationId);
      
      // Prevent users from making themselves super-admin
      allow create, update: if !(request.resource.data.role == 'super-admin' && resource.data.role != 'super-admin');
    }

    // Projects can be read by any member of the organization.
    // They can only be created/updated/deleted by an admin of that organization.
    match /projects/{projectId} {
      allow read: if isOrgMember(resource.data.organizationId);
      allow create, update, delete: if isOrgAdmin(request.resource.data.organizationId);
    }
    
    // Tickets follow project permissions.
    match /tickets/{ticketId} {
       allow read, write: if isOrgMember(resource.data.organizationId);
    }
    
    // Proposals can be read by org members. Write access controlled by who can create/update them.
    match /proposals/{proposalId} {
      allow read: if isOrgMember(resource.data.organizationId);
      allow create, update, delete: if isOrgAdmin(request.resource.data.organizationId);
    }
    
    // Invoices can be read by org members. Write access controlled by who can create/update them.
    match /invoices/{invoiceId} {
       allow read: if isOrgMember(resource.data.organizationId);
       allow create, update, delete: if isOrgAdmin(request.resource.data.organizationId);
    }
    
    // Client Reports can be read by org members. Only clients can create them. Admins can update/delete.
    match /clientReports/{reportId} {
      allow read: if isOrgMember(resource.data.organizationId);
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow update, delete: if isOrgAdmin(resource.data.organizationId);
    }
    
    // Notifications can only be accessed by the user they are intended for.
    match /notifications/{notificationId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    // Chat documents are accessible to users listed in the userIds array.
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.userIds;
      
      // Messages within a chat can be read/written by members of that chat.
      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }
    
    // Support tickets are only accessible by super admins
    match /supportTickets/{ticketId} {
      allow read, write: if isSuperAdmin();
    }
  }
}
