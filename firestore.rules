rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* =========================
       Helpers
       ========================= */
    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function userRole() {
      return userDoc().role;
    }

    function isSuperAdmin() {
      return userRole() == "super-admin";
    }

    function userOrgId() {
      return userDoc().organizationId;
    }

    function isOrgMember(orgId) {
      return request.auth != null && userOrgId() == orgId;
    }

    function orgIdFromExistingDoc() {
      return resource.data.organizationId;
    }

    function orgIdFromNewDoc() {
      return request.resource.data.organizationId;
    }

    /* =========================
       USERS
       ========================= */
    match /users/{userId} {
      allow read: if request.auth != null &&
        (request.auth.uid == userId ||
         isSuperAdmin() ||
         isOrgMember(resource.data.organizationId));
         
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
        (request.auth.uid == userId || isSuperAdmin());
      allow delete: if isSuperAdmin();
    }

    /* =========================
       ORGANIZATIONS
       ========================= */
    match /organizations/{orgId} {
      allow read: if request.auth != null &&
        (isOrgMember(orgId) || isSuperAdmin());
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
        (isOrgMember(orgId) || isSuperAdmin());
      allow delete: if isSuperAdmin();
    }

    /* =========================
       SUPPORT TICKETS (Top-Level)
       ========================= */
    match /supportTickets/{ticketId} {
      allow create: if request.auth != null;
      allow read, update, delete: if isSuperAdmin();
    }

    /* =========================
       NOTIFICATIONS (Top-Level)
       ========================= */
    match /notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isSuperAdmin());
    }

    /* =========================
       GENERIC ORG-SCOPED COLLECTIONS
       ========================= */
    match /{collection}/{docId} {
      // Applies only to allowed collections
      allow create: if request.auth != null &&
        (collection in ['projects','tickets','proposals','invoices','clientReports','chats']) &&
        isOrgMember(orgIdFromNewDoc());

      allow read, update, delete: if request.auth != null &&
        (collection in ['projects','tickets','proposals','invoices','clientReports','chats']) &&
        isOrgMember(orgIdFromExistingDoc());

      // Subcollections under org-scoped docs
      match /{subcollection}/{subdocId} {
        allow create, read, update, delete: if request.auth != null &&
          isOrgMember(orgIdFromExistingDoc());
      }
    }
  }
}
