
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* =========================
       Helpers
       ========================= */
    function userDoc() {
      // Get the document of the currently authenticated user.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function userRole() {
      // Get the role of the currently authenticated user.
      return userDoc().role;
    }

    function isSuperAdmin() {
      // Check if the user is a super-admin.
      return userRole() == "super-admin";
    }

    function userOrgId() {
      // Get the organization ID of the currently authenticated user.
      return userDoc().organizationId;
    }

    function isOrgMember(orgId) {
      // Check if the authenticated user belongs to a specific organization.
      return request.auth != null && userOrgId() == orgId;
    }
    
    // Read organizationId from an existing document.
    function orgIdFromExistingDoc() {
      return resource.data.organizationId;
    }

    // Read organizationId from a new document being created.
    function orgIdFromNewDoc() {
      return request.resource.data.organizationId;
    }

    /* =========================
       USERS
       ========================= */
    match /users/{userId} {
      // A user can read their own document.
      // A super-admin can read any user document.
      // A user can read documents of other users in the same organization.
      allow read: if request.auth != null && (request.auth.uid == userId || isSuperAdmin() || isOrgMember(resource.data.organizationId));

      // Any authenticated user can create a user document (part of signup).
      allow create: if request.auth != null;
      
      // A user can update their own document. A super-admin can update any.
      allow update: if request.auth != null && (request.auth.uid == userId || isSuperAdmin());
      
      // Only a super-admin can delete a user.
      allow delete: if isSuperAdmin();
    }

    /* =========================
       ORGANIZATIONS
       ========================= */
    match /organizations/{orgId} {
      // A user can read their own organization's document. Super-admin can read all.
      allow read: if request.auth != null && (isOrgMember(orgId) || isSuperAdmin());
      
      // An authenticated user can create an organization (part of signup).
      allow create: if request.auth != null;

      // Super-admin can update any field. Org members can only update non-sensitive fields.
      allow update: if request.auth != null && (isOrgMember(orgId) || isSuperAdmin());
      
      // Only super-admins can delete an organization.
      allow delete: if isSuperAdmin();
    }
    
    /* =========================
       SUPPORT TICKETS (Top-Level)
       ========================= */
    match /supportTickets/{ticketId} {
        // Any authenticated user can create a support ticket (e.g., for a plan change).
        allow create: if request.auth != null;
        
        // Only super-admins can read, list, update, or delete support tickets.
        allow read, update, delete: if isSuperAdmin();
    }

    /* =========================
       NOTIFICATIONS (Top-Level)
       ========================= */
    match /notifications/{notificationId} {
      // Allow creation by any authenticated user (server-side logic handles targeting).
      allow create: if request.auth != null;
      
      // Users can only read/update/delete their own notifications. Super-admins can manage all.
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.userId || isSuperAdmin());
    }

    /* =========================
       GENERIC ORG-SCOPED COLLECTIONS
       (projects, tickets, proposals, invoices, clientReports, chats)
       ========================= */
    match /{collection}/{docId} 
        where collection not in ['users', 'organizations', 'supportTickets', 'notifications'] {
      
      // CREATE: User must be a member of the organization they are creating the document for.
      allow create: if request.auth != null && isOrgMember(orgIdFromNewDoc());

      // READ, UPDATE, DELETE: User must be a member of the organization the document belongs to.
      allow read, update, delete: if request.auth != null && isOrgMember(orgIdFromExistingDoc());
        
      // Nested subcollections (e.g., chat messages)
      match /{subcollection}/{subdocId} {
         // Permissions are inherited from the parent document's organization.
         allow create, read, update, delete: if request.auth != null && isOrgMember(orgIdFromExistingDoc());
      }
    }
  }
}
