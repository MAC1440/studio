
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin of an organization.
    function isAdmin(orgId) {
      // Get the user's document from the 'users' collection using their UID.
      // Check if the user's organizationId matches the one provided AND their role is 'admin'.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the requesting user belongs to the organization of the document.
    function isMemberOfOrg(doc) {
      // Check if the user's organizationId matches the document's organizationId.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == doc.organizationId;
    }

    // =====================================================================
    // Users Collection
    // =====================================================================
    match /users/{userId} {
      // Allow a user to read their own profile.
      // Allow an admin to read any profile within their own organization.
      allow read: if request.auth.uid == userId || (isAdmin(get(/databases/$(database)/documents/users/$(userId)).data.organizationId));

      // Allow a user to create their own user document (on first sign-up).
      allow create: if request.auth.uid == userId;

      // Allow a user to update their own profile.
      // Allow an admin to update any user profile within their organization.
      allow update: if request.auth.uid == userId || (isAdmin(resource.data.organizationId));
      
      // Only admins can delete users in their organization, but not themselves.
      allow delete: if isAdmin(get(/databases/$(database)/documents/users/$(userId)).data.organizationId) && request.auth.uid != userId;
    }

    // =====================================================================
    // Organizations Collection
    // =====================================================================
    match /organizations/{orgId} {
      // Allow a user to read their own organization's document.
      allow read: if isMemberOfOrg(resource.data);

      // Anyone can create an organization, as it's part of the sign-up flow.
      allow create: if request.auth.uid == request.resource.data.ownerId;
      
      // Only an admin of that organization can update it (e.g., change subscription plan).
      allow update: if isAdmin(orgId);
      
      allow delete: if false; // Disallow deleting organizations.
    }

    // =====================================================================
    // Projects Collection
    // =====================================================================
    match /projects/{projectId} {
      // Any member of the organization can read a project's details.
      allow read: if isMemberOfOrg(resource.data);
      
      // Only admins can create, update, or delete projects.
      allow create, update, delete: if isAdmin(request.resource.data.organizationId) || isAdmin(resource.data.organizationId);
    }
    
    // =====================================================================
    // Tickets Collection (Top-level)
    // =====================================================================
    match /tickets/{ticketId} {
      // Any member of the organization can read a ticket.
      allow read: if isMemberOfOrg(resource.data);
      
      // Any member of the organization can create a ticket.
      allow create: if isMemberOfOrg(request.resource.data);
      
      // Any member of the organization can update or delete a ticket.
      allow update, delete: if isMemberOfOrg(resource.data);
    }
    
    // =====================================================================
    // Proposals Collection
    // =====================================================================
    match /proposals/{proposalId} {
      // Only the assigned client or an admin can read the proposal.
      allow read: if resource.data.clientId == request.auth.uid || isAdmin(resource.data.organizationId);

      // Only admins can create proposals.
      allow create: if isAdmin(request.resource.data.organizationId);

      // The assigned client can update (to accept/decline/request changes).
      // Admins can update to edit the content.
      allow update: if resource.data.clientId == request.auth.uid || isAdmin(resource.data.organizationId);

      // Only admins can delete proposals.
      allow delete: if isAdmin(resource.data.organizationId);
    }

    // =====================================================================
    // Invoices Collection
    // =====================================================================
    match /invoices/{invoiceId} {
        // Only the assigned client or an admin can read the invoice.
        allow read: if resource.data.clientId == request.auth.uid || isAdmin(resource.data.organizationId);
        
        // Only admins can create invoices.
        allow create: if isAdmin(request.resource.data.organizationId);

        // The assigned client can update (to pay/request changes).
        // Admins can update to edit content.
        allow update: if resource.data.clientId == request.auth.uid || isAdmin(resource.data.organizationId);
        
        // Only admins can delete invoices.
        allow delete: if isAdmin(resource.data.organizationId);
    }

    // =====================================================================
    // Client Reports Collection
    // =====================================================================
    match /clientReports/{reportId} {
        // The client who created it or an admin can read.
        allow read: if resource.data.clientId == request.auth.uid || isAdmin(resource.data.organizationId);
        
        // Only the client can create a report for themselves.
        allow create: if request.resource.data.clientId == request.auth.uid;
        
        // Only admins can update the status (e.g., to 'viewed').
        allow update: if isAdmin(resource.data.organizationId);
        
        // Only admins can delete reports.
        allow delete: if isAdmin(resource.data.organizationId);
    }

    // =====================================================================
    // Notifications Collection
    // =====================================================================
    match /notifications/{notificationId} {
      // A user can only read or update (mark as read) their own notifications.
      allow read, update: if resource.data.userId == request.auth.uid;
      
      // The system creates notifications, so no client-side creation is allowed.
      allow create: if request.auth != null; // Server-side logic handles this.
    }
    
    // =====================================================================
    // Chats and Messages
    // =====================================================================
    match /chats/{chatId} {
      // A user can read/write to a chat only if their UID is in the chat's userIds list.
      allow read, write: if request.auth.uid in resource.data.userIds;
      
      // Admins create chats on behalf of projects.
      allow create: if isAdmin(request.resource.data.organizationId);
      
      match /messages/{messageId} {
        // A user can read messages if they are part of the parent chat.
        allow read: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        
        // A user can create a message if they are part of the chat and are the sender.
        allow create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds
                      && request.resource.data.sender.id == request.auth.uid;
                      
        // Messages are immutable.
        allow update, delete: if false;
      }
    }
  }
}
