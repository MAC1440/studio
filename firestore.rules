rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin of a given organization
    function isOrgAdmin(orgId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is a member of a given organization
    function isOrgMember(orgId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId;
    }
    
    // Helper function to check if a user is a super-admin
    function isSuperAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super-admin';
    }
    
    // Allow super admins to read any user document
    match /users/{userId} {
        allow read: if isSuperAdmin();
        allow read, update: if request.auth.uid == userId;
        allow list: if isOrgMember(resource.data.organizationId);
        // Allow creation if no organization is specified (first signup)
        // or if an admin is creating a user for their own org.
        allow create: if request.resource.data.organizationId == '' || isOrgAdmin(request.resource.data.organizationId);
        allow delete: if isOrgAdmin(resource.data.organizationId);
    }
    
    match /organizations/{orgId} {
        allow read: if isOrgMember(orgId) || isSuperAdmin();
        allow create: if request.auth.uid == request.resource.data.ownerId;
        allow update: if isOrgAdmin(orgId) || isSuperAdmin();
    }
    
    match /projects/{projectId} {
      allow read: if isOrgMember(resource.data.organizationId);
      allow create, update, delete: if isOrgAdmin(resource.data.organizationId);
    }

    match /tickets/{ticketId} {
      allow read: if isOrgMember(resource.data.organizationId);
      allow create, update, delete: if isOrgAdmin(resource.data.organizationId);
    }

    match /chats/{chatId} {
      allow read: if request.auth.uid in resource.data.userIds;
      allow create: if isOrgMember(request.resource.data.organizationId);
      match /messages/{messageId} {
        allow read: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        allow create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }

    match /proposals/{proposalId} {
      allow read: if isOrgMember(resource.data.organizationId);
      allow create, update, delete: if isOrgAdmin(resource.data.organizationId);
    }

    match /invoices/{invoiceId} {
       allow read: if isOrgMember(resource.data.organizationId);
       allow create, update, delete: if isOrgAdmin(resource.data.organizationId);
    }

    match /clientReports/{reportId} {
        allow read: if isOrgMember(resource.data.organizationId);
        allow create: if request.auth.uid == request.resource.data.clientId;
        allow update: if isOrgAdmin(resource.data.organizationId);
    }

    match /supportTickets/{ticketId} {
      // Super admins can get and list tickets.
      allow get, list: if isSuperAdmin();
      // Any authenticated user can create a support ticket.
      allow create: if request.auth != null;
    }
    
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        allow list: if request.auth.uid == request.query.where.userId;
        allow create: if request.auth != null; // Allow admins or system to create notifications
    }
  }
}
