rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has the 'super-admin' role
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super-admin';
    }

    // Helper function to check if a user belongs to an organization
    function isMemberOf(orgId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId;
    }
    
    // Helper function to check if a user is an admin of an organization
    function isAdminOf(orgId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userDoc.organizationId == orgId && userDoc.role == 'admin';
    }

    // Users:
    // - Authenticated users can read their own data.
    // - Admins can read all users within their organization.
    // - Super-admins can read any user's data.
    // - Authenticated users can update their own name/avatar.
    // - Admins can update roles of users in their org (but not to super-admin).
    match /users/{userId} {
      allow read: if request.auth != null && (
                    request.auth.uid == userId ||
                    isMemberOf(resource.data.organizationId) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                    isSuperAdmin()
                  );
      allow create: if request.auth != null; // Anyone can create a user record for themselves during signup.
      allow update: if request.auth != null && (
                      request.auth.uid == userId ||
                      (isAdminOf(resource.data.organizationId) && request.resource.data.role != 'super-admin')
                    );
      allow delete: if request.auth != null && isAdminOf(resource.data.organizationId);
    }
    
    // Organizations:
    // - Super-admins can read all organizations.
    // - Members can read their own organization's details.
    // - Super-admins can update any organization (e.g., change plan).
    match /organizations/{orgId} {
      allow read: if request.auth != null && (isMemberOf(orgId) || isSuperAdmin());
      allow create: if request.auth != null; // Allow creation during signup
      allow update: if request.auth != null && isSuperAdmin();
      allow delete: if request.auth != null && isSuperAdmin();
    }
    
    // Support Tickets: Only super-admins can read or write.
    match /supportTickets/{ticketId} {
      allow read, write: if request.auth != null && isSuperAdmin();
    }
    
    // Notifications: 
    // - Users can access their own notifications.
    // - Super-admins can read all notifications.
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && (
                    request.auth.uid == resource.data.userId ||
                    isSuperAdmin()
                   );
    }

    // Projects: 
    // - Members of an org can read/write projects in that org.
    match /projects/{projectId} {
      allow read, write: if request.auth != null && isMemberOf(resource.data.organizationId);
    }
    
    // Tickets, Proposals, Invoices, Client Reports, Chats:
    // - Actions are allowed if the user is a member of the organization associated with the document.
    match /{collection}/{docId} {
       allow read, write: if request.auth != null && 
                             collection in ['tickets', 'proposals', 'invoices', 'clientReports', 'chats'] &&
                             isMemberOf(resource.data.organizationId);
    }
    
    // Chat Messages Subcollection:
    // - Users can read/write messages in chats they are a part of.
    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
    }
  }
}
