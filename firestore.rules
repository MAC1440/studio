rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* =========================
       HELPERS
    ========================= */

    // Gets the user document of the person making the request
    function getUserDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Gets the role of the requesting user
    function getUserRole() {
      return getUserDoc().role;
    }

    // Checks if the requesting user is a super-admin
    function isSuperAdmin() {
      return getUserRole() == "super-admin";
    }

    // Gets the organization ID of the requesting user
    function getUserOrgId() {
      return getUserDoc().organizationId;
    }

    // Checks if the requesting user is a member of a given organization
    function isOrgMember(orgId) {
      return request.auth != null && getUserOrgId() == orgId;
    }

    // Checks if the user is an admin of a given organization
    function isOrgAdmin(orgId) {
      return isOrgMember(orgId) && getUserRole() == 'admin';
    }

    // =========================
    //  COLLECTIONS
    // =========================

    // Users can be read by themselves, super-admins, or members of the same org.
    // Users can be created by any authenticated user during signup.
    // Users can only be updated by themselves or a super-admin.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isSuperAdmin() || isOrgMember(resource.data.organizationId));
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid == userId || isSuperAdmin());
      allow delete: if isSuperAdmin(); // Only super admins can delete user records
    }

    // Organizations can be read by their members or super-admins.
    // They can only be updated by a super-admin.
    match /organizations/{orgId} {
      allow read, update: if request.auth != null && (isOrgMember(orgId) || isSuperAdmin());
      allow create: if request.auth != null;
    }

    // Support tickets can be created by any authenticated user.
    // Only super-admins can read, list, or manage them.
    match /supportTickets/{ticketId} {
      allow create: if request.auth != null;
      allow read, list, update, delete: if isSuperAdmin();
    }
    
    // Notifications can be created by a server process (for which request.auth is null) or any authenticated user.
    // They can only be read/updated by the user they are intended for, or a super-admin.
    match /notifications/{notificationId} {
       allow create: if request.auth != null; // Server-side logic handles who gets notifications
       allow read, list, update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isSuperAdmin());
    }

    // Generic rule for collections scoped to an organization.
    // This includes projects, tickets, proposals, invoices, clientReports, chats.
    match /{collection}/{docId} 
      where collection in ['projects', 'tickets', 'proposals', 'invoices', 'clientReports', 'chats'] {
      
      // Allow create if the user is a member of the organization they are creating the document in.
      allow create: if isOrgMember(request.resource.data.organizationId);

      // Allow read, list, and write if the user is part of the document's organization.
      // This is a broad rule for simplicity within an organization.
      // For more granular control, you could add role checks (e.g., only admins can delete).
      allow list, read, update, delete: if isOrgMember(resource.data.organizationId);
      
      // Allow access to subcollections (like chat messages) based on the parent document's org.
      match /{subCollection}/{subDocId} {
         allow create, list, read, update, delete: if isOrgMember(get(/databases/$(database)/documents/$(collection)/$(docId)).data.organizationId);
      }
    }
  }
}
