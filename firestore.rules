
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* =========================
       Helpers
       ========================= */
    function userDoc() {
      // It's safer to check for auth existence before trying to use it.
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    function userRole() {
      return userDoc() != null ? userDoc().role : '';
    }

    function isSuperAdmin() {
      return userRole() == "super-admin";
    }

    function userOrgId() {
       return userDoc() != null ? userDoc().organizationId : '';
    }
    
    // Checks if the requesting user is a member of the given organization.
    function isOrgMember(orgId) {
      return request.auth != null && userOrgId() == orgId;
    }
    
    // Checks if the requesting user is the owner of the given organization.
    function isOrgOwner(orgId) {
      return request.auth != null &&
             get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }
    
    // Gets organizationId from an existing document.
    function orgIdFromExistingDoc() {
      return resource.data.organizationId;
    }

    // Gets organizationId from a new document being created.
    function orgIdFromNewDoc() {
      return request.resource.data.organizationId;
    }

    /* =========================
       USERS
       ========================= */
    match /users/{userId} {
      // A user can read their own document.
      // A super-admin can read any user document.
      // An org member can read documents of other users in the same organization.
      allow read: if request.auth != null && (
        request.auth.uid == userId || 
        isSuperAdmin() || 
        isOrgMember(resource.data.organizationId)
      );
      // Anyone authenticated can create a user document (signup).
      allow create: if request.auth != null;
      // A user can update their own document. A super-admin can update any.
      allow update: if request.auth != null && (request.auth.uid == userId || isSuperAdmin());
      // Only a super-admin can delete a user.
      allow delete: if isSuperAdmin();
    }

    /* =========================
       ORGANIZATIONS
       ========================= */
    match /organizations/{orgId} {
      // A super-admin or a member of the organization can read it.
      allow read: if request.auth != null && (isSuperAdmin() || isOrgMember(orgId));
      // Any authenticated user can create an organization (part of signup flow).
      allow create: if request.auth != null;
      // Only super-admin can change subscriptionPlan. Owner can change other fields.
      allow update: if request.auth != null && (
        isSuperAdmin() || 
        (isOrgOwner(orgId) && !('subscriptionPlan' in request.resource.data.diff(resource.data).affectedKeys()))
      );
      // Only a super-admin can delete an organization.
      allow delete: if isSuperAdmin();
    }
    
    /* =========================
       SUPPORT TICKETS (Billing etc.)
       ========================= */
    match /supportTickets/{ticketId} {
        // Any authenticated user can create a support ticket.
        allow create: if request.auth != null;
        // Super-admins can read, update, delete, and LIST all tickets.
        allow list, read, update, delete: if isSuperAdmin();
    }
    
    /* =========================
       NOTIFICATIONS
       ========================= */
    match /notifications/{notificationId} {
      // Any authenticated user can create a notification (server-side logic will control who creates what).
      allow create: if request.auth != null;
      // Users can only read/update/delete their own notifications. Super-admins can manage all.
      allow read, update, delete: if request.auth != null && (isSuperAdmin() || request.auth.uid == resource.data.userId);
    }

    /* =========================
       PROJECTS
       ========================= */
    match /projects/{projectId} {
      // A user must be part of the organization to perform any action on its projects.
      allow create: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromNewDoc()));
      allow list, read, update, delete: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromExistingDoc()));
    }
    
    /* =========================
       TICKETS (Kanban)
       ========================= */
    match /tickets/{ticketId} {
       // A user must be part of the organization to perform any action on its tickets.
      allow create: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromNewDoc()));
      allow list, read, update, delete: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromExistingDoc()));
    }
    
    /* =========================
       PROPOSALS
       ========================= */
    match /proposals/{proposalId} {
       // A user must be part of the organization to perform any action on its proposals.
      allow create: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromNewDoc()));
      allow list, read, update, delete: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromExistingDoc()));
    }

    /* =========================
       INVOICES
       ========================= */
    match /invoices/{invoiceId} {
       // A user must be part of the organization to perform any action on its invoices.
      allow create: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromNewDoc()));
      allow list, read, update, delete: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromExistingDoc()));
    }

    /* =========================
       CLIENT REPORTS
       ========================= */
    match /clientReports/{reportId} {
       // A user must be part of the organization to perform any action on its reports.
      allow create: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromNewDoc()));
      allow list, read, update, delete: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromExistingDoc()));
    }

    /* =========================
       CHATS
       ========================= */
    match /chats/{chatId} {
       // A user must be part of the organization to perform any action on its chats.
      allow create: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromNewDoc()));
      allow list, read, update, delete: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromExistingDoc()));
      
      // Rules for messages subcollection
      match /messages/{messageId} {
         // Org members can create messages. Reading/updating/deleting is also restricted to org members.
         allow create: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromNewDoc()));
         allow list, read, update, delete: if request.auth != null && (isSuperAdmin() || isOrgMember(orgIdFromExistingDoc()));
      }
    }
  }
}
