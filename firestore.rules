
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* =========================
       Helpers
       ========================= */
    function userDoc() {
      // Use get() to read a user's own document to check their role/org.
      // This is secure because the /users/{userId} rule below only allows users to read their own doc.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isSuperAdmin() {
      // Check for the role in the user's own document.
      return request.auth != null && userDoc().role == 'super-admin';
    }

    function isOrgMember(orgId) {
      // Check if the user's organizationId matches the one they are trying to access.
      return request.auth != null && userDoc().organizationId == orgId;
    }

    /* =========================
       USERS
       ========================= */
    match /users/{userId} {
      // A user can read their own document.
      // A super-admin can read any user document.
      // A user can read another user's document if they are in the same organization.
      allow read: if request.auth != null && (request.auth.uid == userId || isSuperAdmin() || isOrgMember(resource.data.organizationId));

      // Any authenticated user can create their own user document during sign-up.
      allow create: if request.auth != null;

      // A user can update their own document. A super-admin can update any user document.
      allow update: if request.auth != null && (request.auth.uid == userId || isSuperAdmin());

      // Only a super-admin can delete a user document.
      allow delete: if isSuperAdmin();
    }

    /* =========================
       ORGANIZATIONS
       ========================= */
    match /organizations/{orgId} {
      // A user can read their own organization's document.
      // A super-admin can read any organization document.
      allow read: if request.auth != null && (isOrgMember(orgId) || isSuperAdmin());
      allow list: if isSuperAdmin();
      allow create, update, delete: if isSuperAdmin();
    }
    
    /* =========================
       SUPPORT TICKETS
       ========================= */
    match /supportTickets/{ticketId} {
      // Any authenticated user can create a support ticket.
      allow create: if request.auth != null;
      // Super admins can read, update, delete, and list all support tickets.
      allow read, update, delete, list: if isSuperAdmin();
    }

    /* =========================
       NOTIFICATIONS
       ========================= */
    match /notifications/{notificationId} {
       // Allow create for any authenticated user.
       allow create: if request.auth != null;
       // Allow users to read/update/delete their own notifications.
       allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    /* =========================
       GENERIC ORG-SCOPED COLLECTIONS
       (proposals, invoices, projects, tickets, clientReports, chats)
       ========================= */
    match /{collection}/{docId} 
        where collection not in ['users', 'organizations', 'supportTickets', 'notifications'] {
      
      // CREATE: The user must be a member of the organization they are creating the document for.
      allow create: if request.auth != null && isOrgMember(request.resource.data.organizationId);

      // READ, UPDATE, DELETE: The user must be a member of the organization the document belongs to.
      allow read, update, delete: if request.auth != null && isOrgMember(resource.data.organizationId);
      
       // Allow super-admin to do anything on these collections.
      allow read, write: if isSuperAdmin();

      // Nested subcollections (like chat messages) inherit the parent's org permissions.
      match /{subcollection}/{subdoc} {
         allow read, write: if request.auth != null && isOrgMember(get(/databases/$(database)/documents/$(collection)/$(docId)).data.organizationId);
         allow read, write: if isSuperAdmin();
      }
    }
  }
}
